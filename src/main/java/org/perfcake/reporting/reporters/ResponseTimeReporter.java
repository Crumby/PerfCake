/*
 * Copyright 2010-2013 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.perfcake.reporting.reporters;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.log4j.Logger;
import org.perfcake.reporting.Measurement;
import org.perfcake.reporting.MeasurementTypes;
import org.perfcake.reporting.ReportsException;
import org.perfcake.reporting.destinations.Destination;

/**
 * <p>
 * This reporter reports average response times that are usually generated by senders.
 * </p>
 * 
 * @author Filip Nguyen <nguyen.filip@gmail.com>
 * 
 */
public class ResponseTimeReporter extends Reporter {
   private BigDecimal totalTime = new BigDecimal("0", MathContext.DECIMAL64);

   private Object computeLock = new Object();

   private AtomicInteger totalResponses = new AtomicInteger(0);

   private static final Logger log = Logger.getLogger(ResponseTimeReporter.class);

   private Measurement averageResponseTime;

   public void report(double time) {
      synchronized (computeLock) {
         totalTime = totalTime.add(new BigDecimal(time));
         totalResponses.incrementAndGet();
      }
   }

   @Override
   public void loadConfigVals() {
   }

   @Override
   public void testStarted() {
   }

   @Override
   public void testEnded() throws ReportsException {
      compute();
      if (averageResponseTime == null) {
         log.warn("No response time was measured");
         return;
      }
      for (Destination dest : destinations) {
         dest.addMessageToSendQueue(averageResponseTime);
         dest.send();
      }
   }

   @Override
   public void periodicalTick(Destination dest) throws ReportsException {
      compute();
      if (averageResponseTime == null) {
         log.warn("Periodical tick but no response time was measured yet.");
         return;
      }
      dest.addMessageToSendQueue(averageResponseTime);
      dest.send();
   }

   private void compute() throws ReportsException {
      synchronized (computeLock) {
         if (totalResponses.get() == 0) // no division by zero
         {
            return;
         }

         averageResponseTime = new Measurement(MeasurementTypes.AR, getLabelType(LabelTypes.PROCESSED_MESSAGES), getLabel(String.valueOf(totalResponses.get())), getAverageResponseTime());
      }
   }

   private String getAverageResponseTime() {
      if (totalResponses.get() < 1) {
         return decimalFormat.format(0);
      }

      BigDecimal result = totalTime.divide(new BigDecimal(totalResponses.get()), 10, RoundingMode.UP);

      return decimalFormat.format(result.doubleValue());
   }
}
